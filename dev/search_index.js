var documenterSearchIndex = {"docs":
[{"location":"#ActivitySpace.jl-Documentation-1","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.jl Documentation","text":"","category":"section"},{"location":"#","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.jl Documentation","text":"","category":"page"},{"location":"#Functions-1","page":"ActivitySpace.jl Documentation","title":"Functions","text":"","category":"section"},{"location":"#","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.jl Documentation","text":"Modules = [ActivitySpace]","category":"page"},{"location":"#ActivitySpace.calculate_bias-Tuple{Any,Any}","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.calculate_bias","text":"calculate_bias(D, randomns)\n\nReturns a XXX.\n\n\n\n\n\n","category":"method"},{"location":"#ActivitySpace.check_bias-NTuple{4,Any}","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.check_bias","text":"check_bias(pop_STP, D, nreps, sample_size)\n\nReturns a Float containing the difference between the population STP and the mean of the empirical sampling distribution for the given sample size.\n\n\n\n\n\n","category":"method"},{"location":"#ActivitySpace.city_sim_data","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.city_sim_data","text":"city_sim_data(city::AbstractString=\"\")\n\nReturns a dataset from a remote location. \n\nParameters\n\ncity - The name of the city for which you want simulated data. If left blank or if does not match an available city, the function will print a list of available city names.\n\nExamples\n\nCheck available datasets:\n\njulia> D  = city_sim_data()\n\nLoad the Utica simulation dataset:\n\njulia> D  = city_sim_data(\"Utica\")\n\nLoad the Buffalo simulation dataset:\n\njulia> D  = city_sim_data(\"Buffalo\")\n\n\n\n\n\n","category":"function"},{"location":"#ActivitySpace.data_prep-Tuple{DataFrames.DataFrame}","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.data_prep","text":"data_prep(D)\n\n\n\n\n\n","category":"method"},{"location":"#ActivitySpace.dataset-Tuple{AbstractString}","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.dataset","text":"dataset(dataset_name::AbstractString)\n\nReturns a dataset from the package's data directory.\n\nParameters\n\ndataset_name - The name of the dataset (excluding file extension)\n\nExamples\n\nLoad the Utica simulation dataset:\n\njulia> D  = dataset(\"utica_sim0\")\n\n\n\n\n\n","category":"method"},{"location":"#ActivitySpace.empirical_sampling_distribution-Tuple{Any}","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.empirical_sampling_distribution","text":"empirical_sampling_distribution(D, nreps, sample_size)\n\nReturns a DataFrame containing the empirical sampling distribution for the Spatio-Temporal Proximity Index and its components.\n\n\n\n\n\n","category":"method"},{"location":"#ActivitySpace.randomize_race-Tuple{Any,Any}","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.randomize_race","text":"randomize_race(D, rand_size)\n\nReturns a DataFrame in which rand_size elements of the race column have been shuffled.\n\n\n\n\n\n","category":"method"},{"location":"#ActivitySpace.stprox-Tuple{Array{#s22,2} where #s22<:Number,Array{#s21,2} where #s21<:Number}","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.stprox","text":"stprox(A::Array{Float64, 2}, B::Array{Float64, 2}; N_a=nothing, N_b=nothing, f::Function=negative_exponential)\n\nReturns the Spatio-Temporal Proximity Index\n\n\n\n\n\n","category":"method"},{"location":"#ActivitySpace.distance_sum","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.distance_sum","text":"distance_sum(A::Array{<:Number, 2}, B::Union{Array{<:Number, 2}, Nothing}=nothing; f::Function=negative_exponential)::Float64\n\n\n\n\n\n","category":"function"},{"location":"#ActivitySpace.identity-Tuple{Number}","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.identity","text":"identity(x::Number)::Float64\n\nInternal method for calculating identity function. Since this is intended for use in distance calculations, x must be a positive, single value. The function simply returns x.\n\n\n\n\n\n","category":"method"},{"location":"#ActivitySpace.negative_exponential-Tuple{Number}","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.negative_exponential","text":"negative_exponential(x::Number)::Float64\n\nInternal method for calculating negative exponential function. Since this is intended for use in distance calculations, x must be a positive, single value. The function returns e^-x.\n\n\n\n\n\n","category":"method"},{"location":"#ActivitySpace.simple_distance-Tuple{}","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.simple_distance","text":"simple_distance(x1::Number, x2::Number, y1::Number, y2::Number, f::Function)::Float64\n\nInternal method for calculating Euclidean distance between two points defined by x1, y1, and x2, y2. An optional function f can be added to transform the distance result.\n\n\n\n\n\n","category":"method"},{"location":"#Index-1","page":"ActivitySpace.jl Documentation","title":"Index","text":"","category":"section"},{"location":"#","page":"ActivitySpace.jl Documentation","title":"ActivitySpace.jl Documentation","text":"","category":"page"}]
}
